const G = 9.8;

function degreeToRadian (d) {
  return (Math.PI * d / 180);
}

function modeCheck(n){
  n = n > 32768 ? n - 65536 : n;
  return n;
}

function EulerAnglesInconversion(o){
  var cos_faiD2 = Math.cos(degreeToRadian(o.Roll)/2);
  var cos_thetaD2 = Math.cos(degreeToRadian(o.Pitch)/2);
  var cos_FAID2 = Math.cos(degreeToRadian(o.Yaw)/2);
  var sin_faiD2 = Math.sin(degreeToRadian(o.Roll)/2);
  var sin_thetaD2 = Math.sin(degreeToRadian(o.Pitch)/2);
  var sin_FAID2 = Math.sin(degreeToRadian(o.Yaw)/2);
  var omega = cos_faiD2 * cos_thetaD2 * cos_FAID2 + sin_faiD2 * sin_thetaD2 * sin_FAID2;
  var x     = sin_faiD2 * cos_thetaD2 * cos_FAID2 - cos_faiD2 * sin_thetaD2 * sin_FAID2;
  var y     = cos_faiD2 * sin_thetaD2 * cos_FAID2 + sin_faiD2 * cos_thetaD2 * sin_FAID2;
  var z     = cos_faiD2 * cos_thetaD2 * sin_FAID2 - sin_faiD2 * sin_thetaD2 * cos_FAID2;

  var alpha = Math.acos(omega) * 2;
  console.log('sin(alpha/2)=', Math.sin(alpha/2));
  console.log(x, y, z);
  var beta_x = Math.acos(x / Math.sin(alpha/2)) / Math.PI * 180;
  var beta_y = Math.acos(y / Math.sin(alpha/2)) / Math.PI * 180;
  var beta_z = Math.acos(z / Math.sin(alpha/2)) / Math.PI * 180;
  return {
    angle_z: beta_z,
    angle_y: beta_y,
    angle_x: beta_x
  };
}

function findAll(src, toFind){
  var result = [];
  var matchedPos = 0;
  for(var i = 0; i < src.length; i++){
    if(src[i] == toFind[matchedPos]){
      matchedPos += 1;
    } else if(src[i] == toFind[0]){
      matchedPos = 1;
    } else{
      matchedPos = 0;
    }
    if(matchedPos === toFind.length){
      result.push(i - matchedPos + 1);
      matchedPos = 0;
    }
  }
  return result;
}

function MPU6050_ExtractFromSingleInstruction(u8arr){
  var bitTable = {
    0x51: ['AxL', 'AxH', 'AyL', 'AyH', 'AzL', 'AzH', 'TL', 'TH', 'checksum'],
    0x52: ['wxL', 'wxH', 'wyL', 'wyH', 'wzL', 'wzH', 'TL', 'TH', 'checksum'],
    0x53: ['RollL', 'RollH', 'PitchL', 'PitchH', 'YawL', 'YawH', 'TL', 'TH', 'checksum']
  };
  var caculateTable = {
    0x51: {
      ax: function (o){
        return modeCheck((o.AxH<<8)|o.AxL)/32768*16*G;
      },
      ay: function (o){
        return modeCheck((o.AyH<<8)|o.AyL)/32768*16*G;
      },
      az: function (o) {
        return modeCheck((o.AzH<<8)|o.AzL)/32768*16*G;
      }
    },
    0x52: {
      wx: function (o) {
        return modeCheck((o.wxH<<8)|o.wxL)/32768*2000;
      },
      wy: function (o) {
        return modeCheck((o.wyH<<8)|o.wyL)/32768*2000;
      },
      wz: function (o) {
        return modeCheck((o.wzH<<8)|o.wzL)/32768*2000;
      }
    },
    0x53: {
      Roll: function (o) {
        return modeCheck((o.RollH<<8)|o.RollL)/32768*180;
      },
      Pitch: function (o) {
        return modeCheck((o.PitchH<<8)|o.PitchL)/32768*180;
      },
      Yaw: function (o) {
        return modeCheck((o.YawH<<8)|o.YawL)/32768*180;
      }
    }
  }

  // extract the raw data;
  var matchedTable = bitTable[u8arr[1]];
  if(matchedTable){
    var obj = {};
    for(var i = 0; i < matchedTable.length; i++){
      obj[matchedTable[i]] = u8arr[i+2];
    }

    // wet the data.
    var result = {};
    var matchedCaculation = caculateTable[u8arr[1]];
    for(var e in matchedCaculation){
      result[e] = matchedCaculation[e](obj);
    }

    // check the validity.
    var checksumCalculated  = 0;
    for(var i = 0; i < 10; i++){
      checksumCalculated += u8arr[i];
    }
    checksumCalculated &= 0xFF;
    if(checksumCalculated == obj.checksum){
      result.valid = true;
    }

    return result;
  }
}

function MPU6050_ExtractFromBuffer (u8arr) {
  // split the data
  var packageHeadLocs = findAll(u8arr, [0x55]);
  var toRead = [];
  var result = [];
  for(var i = 0; i < packageHeadLocs.length; i++){
    var packageEnd = packageHeadLocs[i] + 11;
    if(findAll(packageHeadLocs, [packageEnd])){
      toRead.push([packageHeadLocs[i], packageEnd]);
    }
  }

  toRead.forEach(function(e){
    var instruction = u8arr.subarray(e[0], e[1]+1);
    var o = MPU6050_ExtractFromSingleInstruction(instruction);
    result.push(o);
  });
  return result;
}

// module test

// var valid1 = Uint8Array([0x55,0x51,0x9F,0x02,0xA3,0x07,0x51,0x00,0xE9,0xFC,0x27]);
// var valid2 = Uint8Array([0x55,0x53,0xCB,0x39,0x0C,0xD4,0xFF,0x29,0x82,0xFD,0x33]);
// var valid3 = Uint8Array([0x55,0x52,0x05,0x00,0xF9,0xFF,0xFA,0xFF,0x82,0xFD,0x1C]);
// var buf1 = Uint8Array([0x79,0xFD,0x1F,0x55,0x51,0x8F,0x06,0xBD,0x04,0xE2,0x00,0x82,0xFD,0x5D,0x55,0x52,0x02,0x00,0x00,0x00,0xF8,0xFF,0x82,0xFD,0x1F,0x55,0x53,0xA5,0x38,0xF3,0xD9,0x9B,0xC0,0x82,0xFD,0x2B,0x55,0x51,0x90,0x06,0xBA,0x04,0xE2,0x00,0x7F,0xFD,0x58,0x55,0x52,0xFE,0xFF,0x00,0x00,0x05,0x00,0x7F,0xFD,0x25,0x55,0x53,0xA3,0x38,0xF0,0xD9,0x9C,0xC0,0x7F,0xFD,0x24,0x55,0x51,0x8B,0x06,0xBA,0x04,0xE3,0x00,0x7D,0xFD,0x52,0x55,0x52,0x02,0x00,0xFF,0xFF,0xFC,0xFF,0x7D,0xFD,0x1C,0x55,0x53,0xA5,0x38,0xF2,0xD9,0x9A,0xC0,0x7D,0xFD,0x24,0x55,0x51,0x8B,0x06,0xB9,0x04,0xE1,0x00,0x82,0xFD,0x54,0x55,0x52,0xFC,0xFF,0x00,0x00,0x0A,0x00,0x82,0xFD,0x2B,0x55,0x53,0xA1,0x38,0xEC,0xD9,0x9C,0xC0,0x82,0xFD,0x21,0x55,0x51,0x8A,0x06,0xBC,0x04,0xE1,0x00,0x7D,0xFD,0x51,0x55,0x52,0x01,0x00,0xFF,0xFF,0xF8,0xFF,0x7D,0xFD,0x17,0x55,0x53,0xA3,0x38,0xF0,0xD9,0x9A,0xC0,0x7D,0xFD,0x20,0x55,0x51,0x8E,0x06,0xB7,0x04,0xDE,0x00,0x7F,0xFD,0x4F,0x55,0x52,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0x7F,0xFD,0x1C,0x55,0x53,0xA4,0x38,0xF0,0xD9,0x99,0xC0,0x7F,0xFD,0x22,0x55,0x51,0x8E,0x06,0xBB,0x04,0xDD,0x00,0x81,0xFD,0x54,0x55,0x52,0x03,0x00,0x00,0x00,0xEF,0xFF,0x81,0xFD,0x16,0x55,0x53,0xA8,0x38,0xF9,0xD9,0x96,0xC0,0x81,0xFD,0x2E,0x55,0x51,0x91,0x06,0xBB,0x04,0xE1,0x00,0x86,0xFD,0x60,0x55,0x52,0xFD,0xFF,0xFF,0xFF,0x05,0x00,0x86,0xFD,0x29,0x55,0x53,0xA6,0x38,0xF6,0xD9,0x96,0xC0,0x86,0xFD,0x2E,0x55,0x51,0x8D,0x06,0xBB,0x04,0xE1,0x00,0x83,0xFD,0x59,0x55,0x52,0xFD,0xFF,0xFF,0xFF,0x04,0x00,0x83,0xFD,0x25,0x55,0x53,0xA4,0x38,0xF3,0xD9,0x95,0xC0,0x83,0xFD,0x25,0x55,0x51,0x8E,0x06,0xBC,0x04,0xE0,0x00,0x85,0xFD,0x5C,0x55,0x52,0xFF,0xFF,0x00,0x00,0x02,0x00,0x85,0xFD,0x29,0x55,0x53,0xA3,0x38,0xF2,0xD9,0x95,0xC0,0x85,0xFD,0x25,0x55,0x51,0x8F,0x06,0xBB,0x04,0xE5,0x00,0x82,0xFD,0x5E,0x55,0x52,0xFE,0xFF,0x00,0x00,0x05,0x00,0x82,0xFD,0x28,0x55,0x53,0xA0,0x38,0xEF,0xD9,0x95,0xC0,0x82,0xFD,0x1C,0x55,0x51,0x87,0x06,0xBC,0x04,0xE1,0x00,0x7E,0xFD,0x4F,0x55,0x52,0x00,0x00,0x00,0x00,0xFF,0xFF,0x7E,0xFD,0x20,0x55,0x53,0xA0,0x38,0xEF,0xD9,0x95,0xC0,0x7E,0xFD,0x18,0x55,0x51,0x90,0x06,0xBB,0x04,0xDE,0x00,0x7C,0xFD,0x52,0x55,0x52,0x00,0x00,0xFF,0xFF,0xFC,0xFF,0x7C,0xFD,0x19,0x55,0x53,0xA1,0x38,0xF1,0xD9,0x95,0xC0,0x7C,0xFD,0x19,0x55,0x51,0x90,0x06,0xBB,0x04,0xE3,0x00,0x7D,0xFD,0x58,0x55,0x52,0xFE,0xFF,0xFE,0xFF,0x06,0x00,0x7D,0xFD,0x21,0x55,0x53,0xA0,0x38,0xED,0xD9,0x95,0xC0,0x7D,0xFD,0x15,0x55,0x51,0x92,0x06,0xB7,0x04,0xE0,0x00,0x7F,0xFD,0x55,0x55,0x52,0x00,0x00,0xFE,0xFF,0xF8,0xFF,0x7F,0xFD,0x17,0x55,0x53,0xA3,0x38]);

// console.log(MPU6050_ExtractFromSingleInstruction(valid1));
// console.log(MPU6050_ExtractFromSingleInstruction(valid2));
// console.log(MPU6050_ExtractFromSingleInstruction(valid3));
// console.log(MPU6050_ExtractFromBuffer(buf1));


exports.MPU6050_ExtractFromSingleInstruction = MPU6050_ExtractFromSingleInstruction;
exports.MPU6050_ExtractFromBuffer = MPU6050_ExtractFromBuffer;
exports.findAll = findAll;
exports.EulerAnglesInconversion = EulerAnglesInconversion;
exports.degreeToRadian = degreeToRadian;

function fn(s) {
  var a = [];
  for(var i = 0; i < s.length; i++){
    a.push(s.charCodeAt(i));
  }
  return new Uint8Array(a);
}